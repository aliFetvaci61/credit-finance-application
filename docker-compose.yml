version: '3'
services:
  postgres-db:
    image: 'postgres:13.1-alpine'
    ports:
      - "5432:5432"

    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password 
      POSTGRES_DB: postgres 
    volumes:
      - ./postgresql:/docker-entrypoint-initdb.d/:ro
    networks:
      - my-network

  mysql-db:
    image: mysql:8.0.25
    platform: linux/x86_64
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=credit-db
      - MYSQL_PASSWORD=root
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d/:ro
    networks:
      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - my-network

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      GROUP_ID: driver-group-id
      KAFKA_CREATE_TOPICS: "contact-info-events"
    networks:
      - my-network
    
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "9090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181
    networks:
      - my-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.3
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"

    environment:
      - discovery.type=single-node
    networks:
      - my-network

  #auth-service config
  auth-service:
    container_name: auth-service
    image: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "6190:6190"
    volumes:
      - $HOME/app:/var/app
    environment:
      - SECURITY_JWT_SECRET_KEY=3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
      - SECURITY_JWT_EXPIRATION_TIME:300000
    networks:
      - my-network

  #credit-service config
  credit-service:
    container_name: credit-service
    image: credit-service
    build:
      context: ./credit-service
      dockerfile: Dockerfile
    ports:
      - "6180:6180"
    volumes:
      - $HOME/app:/var/app
    depends_on:
      - mysql-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/credit-db?useUnicode=true&characterEncoding=utf8&useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    networks:
      - my-network

  #user-service config
  user-service:
    container_name: user-service
    image: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "6170:6170"
    volumes:
      - $HOME/app:/var/app
    depends_on:
      - postgres-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/postgres?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password

  #user-service config
  gateway:
    container_name: gateway
    image: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "6161:6161"
    volumes:
      - $HOME/app:/var/app

networks:
  my-network: